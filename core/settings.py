# -*- coding: utf-8 -*-
import flet as ft

from core.buttons import create_buttons
from core.config import read_config_file
from core.file_utils import saving_changes_in_config_ini, save_language
from core.localization import get_text, set_language
from core.views import view_with_elements, program_title


async def record_setting(page: ft.Page):
    """
    –ó–∞–ø–∏—Å—å –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ

    :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
    page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
    lv.controls.append(ft.Text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
    number_of_groups = ft.TextField(label=get_text("select_action_4"), multiline=True, max_lines=19)

    async def btn_click(e) -> None:
        await update_config_value(section='ai', option='number_of_groups', value=number_of_groups.value)
        page.go("/")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        page.update()

    await add_view_with_fields_and_button(page, [number_of_groups], btn_click, lv)


async def change_language(page: ft.Page):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    page.views.clear()
    lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
    page.controls.append(lv)
    lv.controls.append(ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n\n"))
    page.update()

    async def _change_language_ru(_):
        """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
        set_language("ru")
        save_language("ru")
        print(f"[green]{get_text('language_changed')}")

    async def _change_language_en(_):
        """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
        set_language("en")
        save_language("en")
        print(f"[green]{get_text('language_changed')}")

    await view_with_elements(page=page, title=await program_title(title="‚öôÔ∏è –°–º–µ–Ω–∞ —è–∑—ã–∫–∞"),
                             buttons=[
                                 await create_buttons(text=f"–†—É—Å—Å–∫–∏–π", on_click=_change_language_ru),
                                 await create_buttons(text=f"English", on_click=_change_language_en),
                                 await create_buttons(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=lambda _: page.go("/"))
                             ],
                             route_page="/",
                             lv=lv)
    page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É


async def writing_api_id_api_hash(page: ft.Page):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º api, hash –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ https://my.telegram.org/auth
    """
    page.views.clear()
    page.update()

    lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
    page.controls.append(lv)
    lv.controls.append(ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n\n"))
    page.update()
    lv.controls.append(ft.Text("–í–≤–æ–¥ api_id –∏ api_hash"))

    api_id_data = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ api_id", multiline=True, max_lines=19)
    api_hash_data = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ api_hash", multiline=True, max_lines=19)

    async def btn_click(e) -> None:
        await update_config_value(section='telegram_settings', option='api_id', value=api_id_data.value)
        await update_config_value(section='telegram_settings', option='api_hash', value=api_hash_data.value)
        page.go("/")
        page.update()

    await add_view_with_fields_and_button(
        page=page,
        fields=[api_id_data, api_hash_data],
        buttons=btn_click,
        lv=lv
    )


async def add_view_with_fields_and_button(page: ft.Page, fields: list, buttons, lv) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π.
    """

    def back_button_clicked(e) -> None:
        page.go("/")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è view –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–≥–æ –≤ page.views
    view = ft.View(
        "/",
        controls=[
            lv,
            ft.Column(
                controls=fields + [
                    await create_buttons(text="‚úÖ –ì–æ—Ç–æ–≤–æ", on_click=buttons),
                    await create_buttons(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=back_button_clicked),
                ]
            )
        ]
    )
    page.views.append(view)
    page.update()


async def select_and_save_model(page: ft.Page, section, option):
    ai_list = {
        '1': 'qwen-2.5-32b',
        '2': 'qwen-2.5-coder-32b',
        '3': 'qwen-qwq-32b',
        '4': 'deepseek-r1-distill-qwen-32b',
        '5': 'deepseek-r1-distill-llama-70b',
        '6': 'gemma2-9b-it',
        '7': 'llama-3.1-8b-instant',
        '8': 'llama-3.2-11b-vision-preview',
        '9': 'llama-3.2-1b-preview',
        '10': 'llama-3.2-3b-preview',
        '11': 'llama-3.2-90b-vision-preview',
        '12': 'llama-3.3-70b-specdec',
        '13': 'llama-3.3-70b-versatile',
        '14': 'llama-guard-3-8b',
        '15': 'llama3-70b-8192',
        '16': 'llama3-8b-8192',
        '17': 'mistral-saba-24b',
        '18': 'mixtral-8x7b-32768',
    }

    dropdown = ft.Dropdown(
        label=get_text('ai_model_select_2'),
        options=[ft.dropdown.Option(key=key, text=value) for key, value in ai_list.items()],
        width=300,
    )

    message_container = ft.Container(content=ft.Text(""))

    async def on_save(e):
        selected_key = dropdown.value
        if selected_key in ai_list:
            selected_value = ai_list[selected_key]
            await update_config_value(section, option, selected_value)
            message_container.content = ft.Text(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_value}")
        else:
            message_container.content = ft.Text(f"{get_text('ai_model_select_3')}")
        page.update()

    save_button = ft.ElevatedButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=on_save)
    b_button = ft.ElevatedButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=lambda _: page.go("/"))

    page.views.clear()
    page.views.append(
        ft.View(
            "/",
            controls=[
                ft.Column(
                    controls=[
                        ft.Text(f"{get_text('ai_model_select')}\n", size=20, weight=ft.FontWeight.BOLD),
                        dropdown,
                        save_button,
                        b_button,
                        message_container
                    ],
                    alignment=ft.MainAxisAlignment.START,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    expand=True,
                    spacing=20
                )
            ],
            padding=20,
            vertical_alignment=ft.MainAxisAlignment.CENTER,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER
        )
    )
    page.update()


async def update_config_value(section, option, value):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
    config = read_config_file()
    if not config.has_section(section):
        config.add_section(section)
    config.set(section, option, value)
    await saving_changes_in_config_ini(config)
