# -*- coding: utf-8 -*-
import os
import os.path

import flet as ft
from loguru import logger
from telethon.errors import AuthKeyUnregisteredError, FloodWaitError
from telethon.sync import TelegramClient, functions

from core.ai import get_groq_response
from core.config import api_id, api_hash
from core.database import save_to_database, remove_duplicates
from core.file_utils import writing_file, reading_file
from core.localization import get_text
from core.settings import add_view_with_fields_and_button


def find_filess(directory_path, extension) -> list:
    """
    –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ –±–µ–∑ —Ç–æ—á–∫–∏.

    :param directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    :param extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (—É–∫–∞–∑–∞–Ω–Ω–æ–µ –±–µ–∑ —Ç–æ—á–∫–∏)
    :return list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    entities = []  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ user_data/accounts
    try:
        for x in os.listdir(directory_path):
            if x.endswith(f".{extension}"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                file = os.path.splitext(x)[0]  # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                entities.append(file)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–ø–∏—Å–æ–∫

        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {entities}")  # –í—ã–≤–æ–¥–∏–º –∏–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

        return entities  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ json —Ñ–∞–π–ª–æ–≤
    except FileNotFoundError:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞! –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

async def connect_to_telegram() -> TelegramClient:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram."""
    for session_name in find_filess(directory_path='user_data/accounts', extension="session"):
        logger.info(f"üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {session_name}")
        client = TelegramClient(f"user_data/accounts/{session_name}", int(api_id), api_hash)
        await client.connect()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        return client


async def converting_into_a_list_for_further_processing(groups_set) -> None:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≥—Ä—É–ø–ø –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    for group in list(groups_set):
        save_to_database(group)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite


async def search_and_processing_found_groups(lv, page, client, term, groups_set) -> None:
    """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø Telegram –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    try:
        search_results = await client(functions.contacts.SearchRequest(q=term, limit=20))
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
        for chat in search_results.chats:
            # Create a tuple with all the chat information and add it as a single element
            group_data = (
                chat.id,                # ID –≥—Ä—É–ø–ø—ã / –∫–∞–Ω–∞–ª–∞
                chat.title,            # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã / –∫–∞–Ω–∞–ª–∞
                chat.participants_count, # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                chat.username,         # Username –≥—Ä—É–ø–ø—ã / –∫–∞–Ω–∞–ª–∞
                chat.access_hash,      # Hash –≥—Ä—É–ø–ø—ã / –∫–∞–Ω–∞–ª–∞
                chat.date             # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            )
            groups_set.add(group_data)  # Add the tuple to the set
    except AuthKeyUnregisteredError as e:
        await message_output_program_window(lv, page, f"{get_text('error')} {e}")
        return
    except FloodWaitError as e:
        await message_output_program_window(lv, page, f"{get_text('error_1')} {e}")
        return


async def message_output_program_window(lv: ft.ListView, page: ft.Page, message_program):
    """
    –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    :param lv: ListView
    :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    :param message_program: –°–æ–æ–±—â–µ–Ω–∏–µ.
    """
    lv.controls.append(ft.Text(f"{message_program}", color=ft.colors.RED))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
    page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É


async def search_and_save_telegram_groups(page: ft.Page) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø Telegram."""
    lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
    page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
    lv.controls.append(ft.Text(get_text("text_data_processing")))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
    messages_for_ai = ft.TextField(label=get_text("select_action_4"), multiline=True, max_lines=19)

    async def btn_click(e) -> None:
        try:
            client = await connect_to_telegram()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
            groups_set = set()  # –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò –∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            ai_response = await get_groq_response(messages_for_ai.value)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq API.
            await message_output_program_window(lv, page, f"{get_text('ai_model_select_1')}: {ai_response}")
            await message_output_program_window(lv, page, ai_response)
            await writing_file(ai_response)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò –≤ —Ñ–∞–π–ª words_list.txt
            search_terms = await reading_file()  # –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞

            # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
            search_terms = [term.strip() for term in search_terms if term.strip()]

            # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Ä–º–∏–Ω—É
            for term in search_terms:
                # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
                await search_and_processing_found_groups(lv, page, client, term, groups_set)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await converting_into_a_list_for_further_processing(groups_set)
            remove_duplicates()  # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            client.disconnect()  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram

            page.go("/")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            page.update()

        except Exception as e:
            logger.exception(e)

    await add_view_with_fields_and_button(page, [messages_for_ai], btn_click, lv)
